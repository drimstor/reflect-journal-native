const {
  withAndroidManifest,
  withGradleProperties,
} = require("@expo/config-plugins");
const fs = require("fs");
const path = require("path");

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π Expo Config Plugin –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Material Design
 */
function withDiagnosticsPlugin(config) {
  console.log("üîß === –ó–ê–ü–£–°–ö DIAGNOSTICS PLUGIN ===");

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Expo:");
  console.log(`- Name: ${config.name}`);
  console.log(`- Version: ${config.version}`);
  console.log(`- SDK Version: ${config.sdkVersion}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (process.env.MATERIAL_CONFLICT_DEBUG === "true") {
    console.log("üö® MATERIAL_CONFLICT_DEBUG –≤–∫–ª—é—á–µ–Ω");

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ gradle properties
    config = withGradleProperties(config, (config) => {
      console.log("üìù –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ gradle properties...");

      const diagnosticProperties = [
        // –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        { type: "property", key: "org.gradle.logging.level", value: "info" },
        { type: "property", key: "org.gradle.debug", value: "true" },

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        {
          type: "property",
          key: "android.enableResourceOptimizations",
          value: "false",
        },
        { type: "property", key: "android.enableJetifier", value: "true" },
        { type: "property", key: "android.useAndroidX", value: "true" },

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        {
          type: "property",
          key: "org.gradle.configureondemand",
          value: "false",
        },
        { type: "property", key: "org.gradle.parallel", value: "false" },

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —Å–±–æ—Ä–∫–∏
        {
          type: "property",
          key: "org.gradle.jvmargs",
          value: "-Xmx4096m -XX:MaxMetaspaceSize=1024m",
        },
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
      diagnosticProperties.forEach((prop) => {
        config.modResults.push(prop);
        console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${prop.key} = ${prop.value}`);
      });

      return config;
    });
  }

  // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
  config = withAndroidManifest(config, async (config) => {
    if (process.env.DIAGNOSTICS_ENABLED === "true") {
      console.log("üìä –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç...");

      const diagnosticsReport = {
        timestamp: new Date().toISOString(),
        pluginExecuted: true,
        environment: {
          DIAGNOSTICS_ENABLED: process.env.DIAGNOSTICS_ENABLED,
          BUILD_DEBUG: process.env.BUILD_DEBUG,
          MATERIAL_CONFLICT_DEBUG: process.env.MATERIAL_CONFLICT_DEBUG,
          NODE_ENV: process.env.NODE_ENV,
        },
        config: {
          name: config.name,
          version: config.version,
          sdkVersion: config.sdkVersion,
        },
        plugins:
          config.plugins?.map((plugin) =>
            typeof plugin === "string" ? plugin : plugin[0]
          ) || [],
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ android –ø–∞–ø–∫—É
      const androidDir = path.join(process.cwd(), "android");
      if (fs.existsSync(androidDir)) {
        const reportPath = path.join(androidDir, "diagnostics-report.json");
        fs.writeFileSync(
          reportPath,
          JSON.stringify(diagnosticsReport, null, 2)
        );
        console.log(`‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
      }
    }

    return config;
  });

  console.log("‚úÖ === DIAGNOSTICS PLUGIN –ó–ê–í–ï–†–®–ï–ù ===");
  return config;
}

module.exports = withDiagnosticsPlugin;
