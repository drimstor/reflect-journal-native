---
description: 
globs: 
alwaysApply: false
---
# Правила рефакторинга компонентов

## 1. Декомпозиция логики
- Вся бизнес-логика в кастомные хуки
- Один хук = одна функциональность
- Хуки в `lib/hooks`
- Хелперы в `lib/helpers`

## 2. Разделение UI
- Разбивать на подкомпоненты
- Структура подкомпонента:
  ```
  ui/component/
  ├── component.tsx
  └── component.styles.ts
  ```
- Выносить повторяющиеся UI элементы

## 3. Именование файлов
- Компоненты: CamelCase.tsx
- Хуки: useHook.ts
- Стили: CamelCase.module.scss
- Типы: types.ts

## 4. Пропсы
- Деструктуризация пропсов
- Типы в types.ts
- Группировка связанных пропсов

## 5. Стили
- SCSS модули
- Отдельные классы для сложных стилей

## 6. Константы
- Все в const/static.ts
- Группировка в объекты
- Названия в UPPER CASE

## 7. Типизация
- Строгая типизация
- keyof typeof для ключей
- Все типы в types.ts

## 8. Оптимизация
- useMemo для вычислений
- useCallback для функций
- Разделение для предотвращения ререндеров

## 9. Состояния
- Локальные только при необходимости
- Сложная логика в хуки
- Контекст для глобальных

## 10. Комментарии
- Описывать блоки кода в хуках и хеплерах, по принципу - что делает
- Для описания использовать только однострочные комментарии (`//`)
- Для типов и пропсов комментарии пиши на той же строке

## 11. Импорты
- Группировка по категориям
- Абсолютные пути
- Без циклических зависимостей

