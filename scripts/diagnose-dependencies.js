#!/usr/bin/env node

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ Material Design
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ EAS Build –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
 */

const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

console.log("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===");
console.log(`–í—Ä–µ–º—è: ${new Date().toISOString()}`);
console.log(`Node.js: ${process.version}`);
console.log(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log("\nüìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:");
console.log(`DIAGNOSTICS_ENABLED: ${process.env.DIAGNOSTICS_ENABLED}`);
console.log(`BUILD_DEBUG: ${process.env.BUILD_DEBUG}`);
console.log(`MATERIAL_CONFLICT_DEBUG: ${process.env.MATERIAL_CONFLICT_DEBUG}`);

// –ß–∏—Ç–∞–µ–º package.json
console.log("\nüì¶ –ê–ù–ê–õ–ò–ó PACKAGE.JSON:");
const packagePath = path.join(__dirname, "..", "package.json");
if (fs.existsSync(packagePath)) {
  const packageJson = JSON.parse(fs.readFileSync(packagePath, "utf8"));

  console.log(`–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${packageJson.version}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º resolutions
  if (packageJson.resolutions) {
    console.log("‚úÖ Resolutions –Ω–∞–π–¥–µ–Ω—ã:");
    Object.entries(packageJson.resolutions).forEach(([key, value]) => {
      console.log(`  ${key}: ${value}`);
    });
  } else {
    console.log("‚ùå Resolutions –ù–ï –Ω–∞–π–¥–µ–Ω—ã");
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º overrides
  if (packageJson.overrides) {
    console.log("‚úÖ Overrides –Ω–∞–π–¥–µ–Ω—ã:");
    Object.entries(packageJson.overrides).forEach(([key, value]) => {
      console.log(`  ${key}: ${value}`);
    });
  } else {
    console.log("‚ùå Overrides –ù–ï –Ω–∞–π–¥–µ–Ω—ã");
  }

  // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
  console.log("\nüéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –ö–û–ù–§–õ–ò–ö–¢–ê:");
  const suspiciousDeps = [
    "react-native-calendars",
    "react-native-gifted-charts",
    "@gorhom/bottom-sheet",
    "react-native-vis-network",
    "react-native-reanimated",
  ];

  suspiciousDeps.forEach((dep) => {
    const version =
      packageJson.dependencies?.[dep] || packageJson.devDependencies?.[dep];
    if (version) {
      console.log(`  ‚úÖ ${dep}: ${version}`);
    } else {
      console.log(`  ‚ùå ${dep}: –ù–ï –ù–ê–ô–î–ï–ù`);
    }
  });
} else {
  console.log("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º app.json
console.log("\n‚öôÔ∏è –ê–ù–ê–õ–ò–ó APP.JSON:");
const appJsonPath = path.join(__dirname, "..", "app.json");
if (fs.existsSync(appJsonPath)) {
  const appJson = JSON.parse(fs.readFileSync(appJsonPath, "utf8"));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º expo-build-properties
  const buildPropsPlugin = appJson.expo?.plugins?.find(
    (plugin) => Array.isArray(plugin) && plugin[0] === "expo-build-properties"
  );

  if (buildPropsPlugin) {
    console.log("‚úÖ expo-build-properties –Ω–∞–π–¥–µ–Ω:");
    console.log(JSON.stringify(buildPropsPlugin[1], null, 2));
  } else {
    console.log("‚ùå expo-build-properties –ù–ï –Ω–∞–π–¥–µ–Ω");
  }
} else {
  console.log("‚ùå app.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º npm ls –¥–ª—è Material Design
console.log("\nüîç –ê–ù–ê–õ–ò–ó –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ü–ê–ö–ï–¢–û–í:");
try {
  console.log('–ü–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–æ–≤ —Å "material" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏...');
  const npmLs = execSync("npm ls --depth=0 2>/dev/null || true", {
    encoding: "utf8",
  });
  const materialPackages = npmLs
    .split("\n")
    .filter((line) => line.toLowerCase().includes("material"));

  if (materialPackages.length > 0) {
    console.log("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ Material –ø–∞–∫–µ—Ç—ã:");
    materialPackages.forEach((pkg) => console.log(`  ${pkg.trim()}`));
  } else {
    console.log("‚ùå Material –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä—è–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö");
  }
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞–∫–µ—Ç–æ–≤: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º lock —Ñ–∞–π–ª
console.log("\nüîí –ê–ù–ê–õ–ò–ó LOCK –§–ê–ô–õ–ê:");
const lockPath = path.join(__dirname, "..", "package-lock.json");
if (fs.existsSync(lockPath)) {
  try {
    const lockContent = fs.readFileSync(lockPath, "utf8");
    const materialMatches = (lockContent.match(/material/gi) || []).length;
    console.log(`‚úÖ package-lock.json –Ω–∞–π–¥–µ–Ω`);
    console.log(`üìä –£–ø–æ–º–∏–Ω–∞–Ω–∏–π "material": ${materialMatches}`);

    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é material-1.12.0
    if (lockContent.includes("material-1.12.0")) {
      console.log("üö® –ù–ê–ô–î–ï–ù material-1.12.0 –≤ lock —Ñ–∞–π–ª–µ!");
    } else {
      console.log("‚úÖ material-1.12.0 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ lock —Ñ–∞–π–ª–µ");
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è lock —Ñ–∞–π–ª–∞: ${error.message}`);
  }
} else {
  console.log("‚ùå package-lock.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º gradle –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ node_modules
console.log("\nüîç –ê–ù–ê–õ–ò–ó GRADLE –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:");
try {
  const gradleFiles = execSync(
    'find node_modules -name "build.gradle" -path "*/android/*" | head -20',
    { encoding: "utf8" }
  )
    .split("\n")
    .filter(Boolean);

  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${gradleFiles.length} gradle —Ñ–∞–π–ª–æ–≤`);

  // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è material –≤ gradle —Ñ–∞–π–ª–∞—Ö
  gradleFiles.forEach((file) => {
    try {
      const content = fs.readFileSync(file, "utf8");
      const materialMatches = content.match(
        /material.*[0-9]+\.[0-9]+\.[0-9]+/gi
      );
      if (materialMatches) {
        console.log(`üö® ${file}:`);
        materialMatches.forEach((match) => console.log(`  - ${match}`));
      }
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    }
  });
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ gradle —Ñ–∞–π–ª–æ–≤: ${error.message}`);
}

console.log("\nüéØ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
console.log("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã!");
