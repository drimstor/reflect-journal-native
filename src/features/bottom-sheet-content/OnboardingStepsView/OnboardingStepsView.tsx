import { useT, useToggle } from "@/src/shared/lib/hooks";
import {
  ONBOARDING_STEP_KEYS,
  useBottomSheetStore,
  useOnboardingStore,
  useThemeStore,
} from "@/src/shared/store";
import {
  ArrowLeftIcon,
  BottomSheetBox,
  BottomSheetFooter,
  BottomSheetHeader,
  BottomSheetScrollView,
  Button,
  ChartSolidIcon,
  CheckBox,
  CheckboxList,
  Divider,
  MarkdownEmojiText,
  OnboardingCounter,
  PaddingLayout,
  PlusIcon,
  Text,
  TextWithIcon,
} from "@/src/shared/ui";
import { WINDOW_HEIGHT } from "@gorhom/bottom-sheet";
import React, { useCallback, useEffect, useState } from "react";
import { Pressable, View } from "react-native";

const OnboardingStepsView = () => {
  const t = useT();
  const { setBottomSheetVisible, navigateToFlow, setNavigation } =
    useBottomSheetStore();
  const { colors, theme } = useThemeStore();

  const {
    currentStep,
    isCompleted,
    isRewardClaimed,
    setCurrentStep,
    completeStep,
    completeOnboarding,
    claimReward,
    resetOnboarding,
  } = useOnboardingStore();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
  const handleClose = useCallback(() => {
    setBottomSheetVisible(false);
  }, [setBottomSheetVisible]);

  useEffect(() => {
    setNavigation(false, "");
  }, [setNavigation]);

  const maxStep = ONBOARDING_STEP_KEYS.length - 1;

  const handleNextStep = () => {
    if (!currentStep) {
      setCurrentStep(0);
      setLocalStep(0);
      return;
    }

    if (localStep < maxStep && localStep + 1 <= currentStep) {
      setLocalStep(localStep + 1);
    }
  };

  const handlePreviousStep = () => {
    if (localStep > -1) {
      setLocalStep(localStep - 1);
    }
  };

  const { value: isInstructionVisible, toggle: toggleInstructionVisible } =
    useToggle(false);

  const [localStep, setLocalStep] = useState(currentStep ?? -1);

  const isMeetStep = localStep === -1;
  const isDontHaveNext = localStep === currentStep;
  const isSteps = localStep >= 0 && localStep <= maxStep;

  // useEffect(() => {
  //   setCurrentStep(4);
  // }, []);

  console.log({ localStep, currentStep, isCompleted, isRewardClaimed });

  const stepsConfig = {
    "0": {
      description:
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å. üìî\n–ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç. –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ –±—É–¥—É—Ç –∏–Ω—Å–∞–π—Ç—ã. ‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫?",
      type: "journals",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫",
          checked: true,
        },
        {
          text: "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å",
          checked: false,
        },
      ],
    },
    "1": {
      description:
        "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. üí¨\n–° –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—Å ‚Äî –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è. ‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç?",
      type: "chats",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç",
          checked: true,
        },
        {
          text: "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
          checked: false,
        },
      ],
    },
    "2": {
      description:
        "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å. üéØ\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥–∏ –≤—Ä—É—á–Ω—É—é ‚Äî –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ –≤–∞–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. ‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å?",
      type: "goals",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ —Ü–µ–ª—å",
          checked: true,
        },
      ],
    },
    "3": {
      description:
        "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Å–∞–º–º–∞—Ä–∏. ü™û\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ–º–∞–º. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å–≤—è–∑–∏ –∏ –æ—Å–æ–∑–Ω–∞—Ç—å, –∫–∞–∫ –≤—ã –º–µ–Ω—è–µ—Ç–µ—Å—å. ‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏?",
      type: "summaries",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–º–∞—Ä–∏",
          checked: true,
        },
      ],
    },
    "4": {
      description:
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö. üìä\n–í —Ä–∞–∑–¥–µ–ª–µ ¬´–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö¬ª –≤—ã —É–≤–∏–¥–∏—Ç–µ, –∫–∞–∫–∏–µ —Ç–µ–º—ã –∑–∞–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–µ—Å—Ç–∞ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏. –ê –≤ ¬´–ö–∞—Ä—Ç–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π¬ª ‚Äî –∫–∞–∫ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. ‚ú®",
      instruction: "–ö–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?",
      type: "analyze",
      checklist: [
        {
          text: '–û—Ç–∫—Ä–æ–π—Ç–µ "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö"',
          checked: true,
        },
        {
          text: '–û—Ç–∫—Ä–æ–π—Ç–µ "–ö–∞—Ä—Ç—É –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π"',
          checked: true,
        },
      ],
    },
  };

  const instructionText = `1. –í—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ [ICON_COMPONENT] –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–Ω–∏–∑—É\n3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø "${t(
    `entities.${stepsConfig[localStep]?.type}.singular`
  )}" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è\n4. –ù–∞–∂–º–∏—Ç–µ "${t("shared.actions.create")}"`;

  const analyzeInstructionText = `1. –í—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ [ICON_COMPONENT] –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–Ω–∏–∑—É\n3. –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–û–±–∑–æ—Ä"\n4. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞`;

  const meetingText =
    "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ Reflexity - —Ç–≤–æ–π –ª–∞–π—Ñ-–º–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.\n\n–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏ –Ω–∞–≥—Ä–∞–¥—É - –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∫–∏ Plus.";

  const rewardText =
    "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É.";

  const thankYouText = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞!";

  return (
    <BottomSheetBox>
      <BottomSheetHeader
        isBorderGap={false}
        title={t("onboarding.title")}
        onBack={isMeetStep ? undefined : handlePreviousStep}
        onNext={isDontHaveNext || isMeetStep ? undefined : handleNextStep}
        // onClose={isMeetStep ? handleClose : undefined}
      />
      <BottomSheetScrollView
        customMaxHeight={WINDOW_HEIGHT - 270}
        additionalHeight={225}
      >
        {isMeetStep && (
          <PaddingLayout style={{ gap: 12, paddingVertical: 18 }}>
            <Text
              size="normal"
              color={colors.contrast}
              style={{ textAlign: "center" }}
            >
              {meetingText}
            </Text>
          </PaddingLayout>
        )}
        {isSteps && (
          <>
            <OnboardingCounter
              steps={ONBOARDING_STEP_KEYS.map((key) => t(key))}
              currentStep={localStep}
              secondaryColor={
                theme === "dark" ? colors.light : colors.alternate
              }
              style={{
                marginTop: 24,
                marginBottom: 22,
                maxWidth: 400,
                marginHorizontal: "auto",
              }}
            />
            <Divider color={colors.alternate} style={{ marginVertical: 0 }} />
            <PaddingLayout style={{ gap: 12, paddingVertical: 18 }}>
              <MarkdownEmojiText color={colors.contrast}>
                {stepsConfig[localStep]?.description}
              </MarkdownEmojiText>
            </PaddingLayout>
            <Divider color={colors.alternate} style={{ marginVertical: 0 }} />
            <PaddingLayout style={{ gap: 12, paddingVertical: 18 }}>
              <CheckboxList style={{ paddingVertical: 0, gap: 12 }}>
                {stepsConfig[localStep]?.checklist.map((item, index) => (
                  <CheckBox
                    text={item.text}
                    checked={item.checked}
                    key={index}
                  />
                ))}
              </CheckboxList>
            </PaddingLayout>
            <Divider color={colors.alternate} style={{ marginVertical: 0 }} />
            <PaddingLayout
              style={{ gap: 12, paddingVertical: 18, paddingTop: 15 }}
            >
              <Pressable
                style={{ flexDirection: "row", alignItems: "center", gap: 8 }}
                onPress={() => toggleInstructionVisible()}
              >
                <Text size="normal" font="bold" color={colors.contrast}>
                  {stepsConfig[localStep]?.instruction}
                </Text>
                <View
                  style={{
                    marginTop: 3,
                    transform: [
                      { rotate: isInstructionVisible ? "90deg" : "-90deg" },
                    ],
                  }}
                >
                  <ArrowLeftIcon color={colors.contrast} size={16} />
                </View>
              </Pressable>
              {isInstructionVisible && (
                <TextWithIcon
                  text={
                    stepsConfig[localStep]?.type === "analyze"
                      ? analyzeInstructionText
                      : instructionText
                  }
                  element={
                    stepsConfig[localStep]?.type === "analyze" ? (
                      <ChartSolidIcon color={colors.contrast} size={26} />
                    ) : (
                      <View
                        style={{
                          backgroundColor: colors.contrast,
                          borderRadius: 13,
                          marginHorizontal: 2,
                        }}
                      >
                        <PlusIcon color={colors.secondary} size={26} />
                      </View>
                    )
                  }
                />
              )}
            </PaddingLayout>
          </>
        )}
        {isCompleted && (
          <PaddingLayout>
            {isRewardClaimed ? (
              <Text
                size="normal"
                color={colors.contrast}
                style={{ textAlign: "center" }}
              >
                {thankYouText}
              </Text>
            ) : (
              <Text
                size="normal"
                color={colors.contrast}
                style={{ textAlign: "center" }}
              >
                {rewardText}
              </Text>
            )}
          </PaddingLayout>
        )}
      </BottomSheetScrollView>

      <BottomSheetFooter isBorderGap={false}>
        <Button
          backgroundColor={theme === "dark" ? colors.accent : colors.primary}
          textColor={theme === "dark" ? colors.primary : colors.white}
          onPress={isMeetStep ? handleNextStep : handleClose}
          isLoading={false}
          disabled={false}
        >
          {t(
            isMeetStep
              ? "shared.actions.continue"
              : "onboarding.inMainMenuButton"
          )}
        </Button>
      </BottomSheetFooter>
    </BottomSheetBox>
  );
};

export default OnboardingStepsView;
