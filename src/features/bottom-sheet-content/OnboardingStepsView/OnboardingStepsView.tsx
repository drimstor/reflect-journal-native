import { useT, useToggle } from "@/src/shared/lib/hooks";
import {
  ONBOARDING_STEP_KEYS,
  useBottomSheetStore,
  useOnboardingStore,
  useThemeStore,
} from "@/src/shared/store";
import {
  ArrowLeftIcon,
  BottomSheetBox,
  BottomSheetFooter,
  BottomSheetHeader,
  Button,
  ChartSolidIcon,
  CheckBox,
  CheckboxList,
  Divider,
  MarkdownEmojiText,
  OnboardingCounter,
  PaddingLayout,
  PlusIcon,
  Text,
} from "@/src/shared/ui";
import React, { useCallback, useState } from "react";
import { Pressable, View } from "react-native";

const OnboardingStepsView = () => {
  const t = useT();
  const { setBottomSheetVisible } = useBottomSheetStore();
  const { colors, theme } = useThemeStore();

  const {
    currentStep,
    isCompleted,
    isRewardClaimed,
    setCurrentStep,
    completeStep,
    completeOnboarding,
    claimReward,
    resetOnboarding,
  } = useOnboardingStore();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
  const handleClose = useCallback(() => {
    setBottomSheetVisible(false);
  }, [setBottomSheetVisible]);

  const maxStep = ONBOARDING_STEP_KEYS.length - 1;

  const handleNextStep = () => {
    if (!currentStep || currentStep === -1) {
      setCurrentStep(0);
      setLocalStep(0);
      return;
    }

    if (localStep < maxStep && localStep + 1 <= currentStep) {
      setLocalStep(localStep + 1);
    }
  };

  const handlePreviousStep = () => {
    if (localStep > -1) {
      setLocalStep(localStep - 1);
    }
  };

  const { value: isInstructionVisible, toggle: toggleInstructionVisible } =
    useToggle(false);

  const [localStep, setLocalStep] = useState(currentStep ?? -1);

  const isMeetStep = localStep === -1;
  const isDontHaveNext = localStep === currentStep;
  const isSteps = localStep >= 0 && localStep <= maxStep;

  // useEffect(() => {
  //   setCurrentStep(-1);
  // }, []);

  console.log({ localStep, currentStep, isCompleted, isRewardClaimed });

  const meetingText =
    "–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É ‚Äî –Ω–µ–¥–µ–ª—é –ø–æ–¥–ø–∏—Å–∫–∏ **Plus** –±–µ—Å–ø–ª–∞—Ç–Ω–æ!";

  const stepsConfig = {
    "0": {
      description:
        "–°–æ–∑–¥–∞–π—Ç–µ **–î–Ω–µ–≤–Ω–∏–∫** –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å. üìî\n–ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç ‚Äî —á–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –∏–Ω—Å–∞–π—Ç—ã. ‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫?",
      type: "journals",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫",
          checked: true,
        },
        {
          text: "–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å",
          checked: false,
        },
      ],
    },
    "1": {
      description:
        "–°–æ–∑–¥–∞–π—Ç–µ **–ß–∞—Ç** –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. üí¨\n–° –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∑–Ω–∞—ë—Ç –≤–∞—Å –ª—É—á—à–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è. ‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç?",
      type: "chats",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç",
          checked: true,
        },
        {
          text: "–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
          checked: false,
        },
      ],
    },
    "2": {
      description:
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é **–¶–µ–ª—å**. üéØ\n–î–æ–±–∞–≤—å—Ç–µ —à–∞–≥–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–º–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. ‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å?",
      type: "goals",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ —Ü–µ–ª—å",
          checked: true,
        },
      ],
    },
    "3": {
      description:
        "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ **–°–∞–º–º–∞—Ä–∏**.ü™û\n–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ–º–∞–º ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å —Å–≤—è–∑–∏ –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≤—ã –º–µ–Ω—è–µ—Ç–µ—Å—å.‚ú®",
      instruction: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏?",
      type: "summaries",
      checklist: [
        {
          text: "–°–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–º–∞—Ä–∏",
          checked: true,
        },
      ],
    },
    "4": {
      description:
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö. üìä\n–í —Ä–∞–∑–¥–µ–ª–µ **–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö** –≤—ã —É–≤–∏–¥–∏—Ç–µ, –∫–∞–∫–∏–µ —Ç–µ–º—ã –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.\n–ê –≤ **–ö–∞—Ä—Ç–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π** ‚Äî –∫–∞–∫ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. ‚ú®",
      instruction: "–ö–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?",
      type: "analyze",
      checklist: [
        {
          text: '–û—Ç–∫—Ä–æ–π—Ç–µ "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö"',
          checked: true,
        },
        {
          text: '–û—Ç–∫—Ä–æ–π—Ç–µ "–ö–∞—Ä—Ç—É –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π"',
          checked: true,
        },
      ],
    },
  };

  const instructionText = `1. –í—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ [ICON_COMPONENT] –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–Ω–∏–∑—É\n3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø **${t(
    `entities.${stepsConfig[localStep]?.type}.singular`
  )}** –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è\n4. –ù–∞–∂–º–∏—Ç–µ **${t("shared.actions.create")}**`;

  const analyzeInstructionText = `1. –í—ã–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ [ICON_COMPONENT] –≤ –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–Ω–∏–∑—É\n3. –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É **–û–±–∑–æ—Ä**\n4. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞`;

  const rewardText =
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥!\n\n–ó–∞–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É!";

  const thankYouText =
    "–í—ã –æ—Å–≤–æ–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! üéâ\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º –∑–µ—Ä–∫–∞–ª–æ–º, –æ—Ç—Ä–∞–∂–∞—è —Ç–æ, —á—Ç–æ –≤—ã –Ω–µ –≤–∏–¥–µ–ª–∏ —Ä–∞–Ω—å—à–µ. –ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã ‚Äî –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–µ–±—è –∑–∞–Ω–æ–≤–æ. ‚ú®";

  return (
    <BottomSheetBox>
      <BottomSheetHeader
        isBorderGap={false}
        title={t("onboarding.title")}
        onBack={isMeetStep ? undefined : handlePreviousStep}
        onNext={isDontHaveNext || isMeetStep ? undefined : handleNextStep}
        // onClose={isMeetStep ? handleClose : undefined}
      />
      {isMeetStep && (
        <PaddingLayout style={{ gap: 12, paddingVertical: 18 }}>
          <MarkdownEmojiText
            color={colors.contrast}
            style={{ textAlign: "center" }}
          >
            {meetingText}
          </MarkdownEmojiText>
        </PaddingLayout>
      )}
      {isSteps && (
        <>
          <OnboardingCounter
            steps={ONBOARDING_STEP_KEYS.map((key) => t(key))}
            currentStep={localStep}
            secondaryColor={theme === "dark" ? colors.light : colors.alternate}
            style={{
              marginTop: 24,
              marginBottom: 22,
              maxWidth: 400,
              marginHorizontal: "auto",
            }}
          />
          <Divider color={colors.alternate} style={{ marginVertical: 0 }} />
          <PaddingLayout style={{ gap: 12, paddingVertical: 18 }}>
            <MarkdownEmojiText color={colors.contrast}>
              {stepsConfig[localStep]?.description}
            </MarkdownEmojiText>
          </PaddingLayout>
          <Divider color={colors.alternate} style={{ marginVertical: 0 }} />
          <PaddingLayout style={{ gap: 12, paddingVertical: 18 }}>
            <CheckboxList style={{ paddingVertical: 0, gap: 12 }}>
              {stepsConfig[localStep]?.checklist.map((item, index) => (
                <CheckBox text={item.text} checked={item.checked} key={index} />
              ))}
            </CheckboxList>
          </PaddingLayout>
          <Divider color={colors.alternate} style={{ marginVertical: 0 }} />
          <PaddingLayout
            style={{ gap: 12, paddingVertical: 18, paddingTop: 15 }}
          >
            <Pressable
              style={{ flexDirection: "row", alignItems: "center", gap: 8 }}
              onPress={() => toggleInstructionVisible()}
            >
              <Text size="normal" font="bold" color={colors.contrast}>
                {stepsConfig[localStep]?.instruction}
              </Text>
              <View
                style={{
                  marginTop: 3,
                  transform: [
                    { rotate: isInstructionVisible ? "90deg" : "-90deg" },
                  ],
                }}
              >
                <ArrowLeftIcon color={colors.contrast} size={16} />
              </View>
            </Pressable>
            {isInstructionVisible && (
              <MarkdownEmojiText
                color={colors.contrast}
                elements={[
                  {
                    placeholder: "[ICON_COMPONENT]",
                    element:
                      stepsConfig[localStep]?.type === "analyze" ? (
                        <ChartSolidIcon color={colors.contrast} size={26} />
                      ) : (
                        <View
                          style={{
                            backgroundColor: colors.contrast,
                            borderRadius: 13,
                            marginHorizontal: 2,
                          }}
                        >
                          <PlusIcon color={colors.secondary} size={26} />
                        </View>
                      ),
                  },
                ]}
              >
                {stepsConfig[localStep]?.type === "analyze"
                  ? analyzeInstructionText
                  : instructionText}
              </MarkdownEmojiText>
            )}
          </PaddingLayout>
        </>
      )}
      {isCompleted && (
        <PaddingLayout>
          {isRewardClaimed ? (
            <Text
              size="normal"
              color={colors.contrast}
              style={{ textAlign: "center" }}
            >
              {thankYouText}
            </Text>
          ) : (
            <Text
              size="normal"
              color={colors.contrast}
              style={{ textAlign: "center" }}
            >
              {rewardText}
            </Text>
          )}
        </PaddingLayout>
      )}

      <BottomSheetFooter isBorderGap={false}>
        {isCompleted && !isRewardClaimed && (
          <Button
            backgroundColor={colors.alternate}
            onPress={() => {}}
            isLoading={false}
            disabled={false}
          >
            {t("shared.actions.takeReward")}
          </Button>
        )}
        <Button
          backgroundColor={theme === "dark" ? colors.accent : colors.primary}
          textColor={theme === "dark" ? colors.primary : colors.white}
          onPress={isMeetStep ? handleNextStep : handleClose}
          isLoading={false}
          disabled={false}
        >
          {t(
            isMeetStep
              ? "shared.actions.continue"
              : "onboarding.inMainMenuButton"
          )}
        </Button>
      </BottomSheetFooter>
    </BottomSheetBox>
  );
};

export default OnboardingStepsView;
