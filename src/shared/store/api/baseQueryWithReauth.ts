import { PATHS } from "@/src/shared/const";
import {
  baseQueryConfig,
  handleError,
  tokenService,
  useBottomSheetStore,
} from "@/src/shared/store";
import type {
  BaseQueryFn,
  FetchArgs,
  FetchBaseQueryError,
} from "@reduxjs/toolkit/query";
import { fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { Mutex } from "async-mutex";

const mutex = new Mutex();

// –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
export const baseQuery = fetchBaseQuery(baseQueryConfig);

export const baseQueryWithReauth: BaseQueryFn<
  string | FetchArgs,
  unknown,
  FetchBaseQueryError
> = async (args, api, extraOptions) => {
  await mutex.waitForUnlock();
  let result = await baseQuery(args, api, extraOptions);
  if (result.error && result.error.status === 401) {
    console.log("üö® –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 401, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω");
    if (!mutex.isLocked()) {
      const release = await mutex.acquire();
      try {
        const refreshToken = await tokenService.getRefreshToken();
        if (!refreshToken) {
          await tokenService.removeTokens();
          // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
          useBottomSheetStore.getState().setNavigation(true, PATHS.AUTH, {});
          return result;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        const refreshResult = await baseQuery(
          {
            url: "/auth/refresh",
            method: "POST",
            body: { refresh_token: refreshToken },
          },
          api,
          extraOptions
        );

        if (refreshResult.data) {
          console.log("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å");
          const { access_token, refresh_token } = refreshResult.data as {
            access_token: string;
            refresh_token: string;
          };

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
          await tokenService.setTokens(access_token, refresh_token);

          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
          result = await baseQuery(args, api, extraOptions);
        } else {
          await tokenService.removeTokens();
          // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
          useBottomSheetStore.getState().setNavigation(true, PATHS.AUTH, {});
        }
      } finally {
        release();
      }
    } else {
      await mutex.waitForUnlock();
      result = await baseQuery(args, api, extraOptions);
    }
  }

  if (result.error) handleError(api.dispatch)(result.error);

  return result;
};
